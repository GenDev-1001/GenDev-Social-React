{"version":3,"sources":["components/pages/Chat/ChatPage.tsx"],"names":["Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","Messages","AddMessageForm","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","messages","current","scrollIntoView","behavior","style","height","overflowY","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","index","Message","message","id","ref","React","memo","src","photo","width","userName","setMessage","onChange","value","disabled","onClick","sendMessage","ChatPage"],"mappings":"kLAgBMA,EAAiB,WAEnB,IAAMC,EAAWC,cAGXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAU/D,OARAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAIC,gCACgB,UAAXN,GAAsB,8EACvB,cAACO,EAAD,IACA,cAACC,EAAD,QAKND,EAAqB,WAEvB,IAAME,EAAoBC,iBAAuB,MAFpB,EAGWC,oBAAS,GAHpB,mBAGtBC,EAHsB,KAGRC,EAHQ,KAKvBC,EAAWb,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKW,YAiBjE,OANAV,qBAAU,WACa,IAAD,EAAdQ,IACA,UAAAH,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACH,IAGA,sBAAKI,MAAO,CAACC,OAAQ,QAASC,UAAW,QAASC,SAhBhC,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACfC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAiB,KAC7EjB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAWpC,UACKC,EAASgB,KAAI,SAACC,EAAGC,GAAJ,OAAc,cAACC,EAAD,CAAoBC,QAASH,GAAfA,EAAEI,OAC5C,qBAAKC,IAAK3B,QAMhBwB,EAAqDI,IAAMC,MAAK,YAAgB,IAAdJ,EAAa,EAAbA,QAIpE,OACI,gCACI,qBAAKK,IAAKL,EAAQM,MAAOtB,MAAO,CAACuB,MAAO,UAD5C,IACuD,4BAAIP,EAAQQ,WAC/D,uBACCR,EAAQA,QACT,6BAON1B,EAA+B,WAAO,IAAD,EACTG,mBAAS,IADA,mBAChCuB,EADgC,KACvBS,EADuB,KAEjC7C,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OACI,gCACI,8BACI,0BAAU4C,SAAU,SAACtB,GAAD,OAAOqB,EAAWrB,EAAEE,cAAcqB,QAAQA,MAAOX,MAEzE,8BACI,wBAAQY,SAAqB,UAAX9C,EAAoB+C,QAbvB,WAClBb,IAGLpC,EAASkD,YAAYd,IACrBS,EAAW,MAQH,wBAMDM,UAxGY,WACvB,OACI,8BACI,cAACpD,EAAD","file":"static/js/5.ffa5a44e.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\r\nimport {message} from \"antd\";\r\nimport {ChatMessageAPIType} from \"../../../api/chat-api\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {sendMessage, startMessagesListening, stopMessagesListening} from \"../../../redux/chat-reducer\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occured, Please refresh the page</div>}\r\n            <Messages/>\r\n            <AddMessageForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Messages: React.FC = () => {\r\n\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(false)\r\n\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget\r\n        if(Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight ) < 300){\r\n            !isAutoScroll && setIsAutoScroll(true);\r\n        }else {\r\n            isAutoScroll && setIsAutoScroll(false);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    return (\r\n        <div style={{height: '550px', overflowY: 'auto'}} onScroll={scrollHandler}>\r\n            {messages.map((m, index) => <Message key={m.id} message={m}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({message}) => {\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <img src={message.photo} style={{width: '30px'}}/> <b>{message.userName}</b>\r\n            <br/>\r\n            {message.message}\r\n            <hr/>\r\n        </div>\r\n    )\r\n}\r\n)\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch();\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status);\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return;\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea onChange={(e) => setMessage(e.currentTarget.value)} value={message}></textarea>\r\n            </div>\r\n            <div>\r\n                <button disabled={status !== 'ready'} onClick={sendMessageHandler}>send</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatPage"],"sourceRoot":""}