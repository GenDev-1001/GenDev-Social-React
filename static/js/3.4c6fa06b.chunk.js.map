{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/ProfileInfo/Status/ProfileStatus.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/Status/ProfileStatusWithHooks.tsx","components/Profile/ProfileInfo/ProfileDataForm/ProfileDataForm.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/AddNewPostForm/AddNewPostForm.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","className","s","onDoubleClick","onBlur","updateStatus","onChange","e","currentTarget","value","autoFocus","ProfileDataFormReduxForm","reduxForm","form","handleSubmit","profile","error","onSubmit","formSummaryError","descriptionBlock","profileInfo","createField","Input","socialList","type","Textarea","Object","keys","contacts","map","key","socialListItem","ProfileData","isOwner","goToEditMode","onClick","fullName","contactTitle","contactValue","lookingForAJob","lookingForAJobDescription","aboutMe","Contact","socialListItemLink","href","ProfileInfo","savePhoto","saveProfile","photoLong","alt","src","userAva","photos","large","usersAva","initialValues","formData","then","statusBlock","downloadingPhotos","target","files","length","Preloader","Post","item","message","countLikes","maxLength10","maxLengthCreator","minLength2","minLengthCreator","required","MyPosts","postsElements","postsData","messages","id","postsBlock","values","addPost","newPostText","posts","MyPostsMemorized","React","memo","MyPostsContainer","profilePage","actions","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","Error","getUserProfile","getStatus","refreshProfile","prevProps","prevState","Component","compose","withRouter"],"mappings":"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","file":"static/js/3.4c6fa06b.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent : React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = '/login'/>\r\n\r\n            return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__1wlHc\",\"photoLong\":\"ProfileInfo_photoLong__10eRC\",\"profileInfo\":\"ProfileInfo_profileInfo__3i1XP\",\"socialList\":\"ProfileInfo_socialList__PGh5B\",\"socialListItem\":\"ProfileInfo_socialListItem__SYGfs\",\"socialListItemLink\":\"ProfileInfo_socialListItemLink__13Sal\",\"userAva\":\"ProfileInfo_userAva__1o63a\",\"statusBlock\":\"ProfileInfo_statusBlock__19cVH\",\"downloadingPhotos\":\"ProfileInfo_downloadingPhotos__16X1y\",\"formControl\":\"ProfileInfo_formControl__3M5pU\",\"error\":\"ProfileInfo_error__1I07E\",\"formSummaryError\":\"ProfileInfo_formSummaryError__3z9wk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"status\":\"ProfileStatus_status__7Lnpg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__-9L8J\",\"posts\":\"MyPosts_posts__2hrF-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__6XZw7\"};","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport s from \"./ProfileStatus.module.css\";\r\n\r\ntype PropsType = {\r\n    status: string,\r\n    updateStatus: (status:string) => void,\r\n}\r\n\r\nconst ProfileStatusWithHooks: React.FC<PropsType> = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n\r\n    const onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n\r\n    return (\r\n        <span className={s.status}>\r\n                {!editMode &&\r\n                <span\r\n                    onDoubleClick={activateEditMode}\r\n                >{props.status || '------'} </span>\r\n                }\r\n            {editMode &&\r\n            <input\r\n                onBlur={deactivateEditMode}\r\n                onChange={onStatusChange}\r\n                autoFocus={true}\r\n                value={status}\r\n            />\r\n            }\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\nexport default ProfileStatusWithHooks;","import React from \"react\";\r\nimport s from \"../ProfileInfo.module.css\";\r\nimport {createField, GetStringKeys, Input, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {ProfileType} from \"../../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType,\r\n}\r\n\r\ntype ProfileTypeKeys = GetStringKeys<ProfileType>\r\n\r\nconst ProfileDataForm: React.FC<InjectedFormProps<ProfileType, PropsType>& PropsType> = ({handleSubmit, profile, error}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                <button>Save</button>\r\n            </div>\r\n            {(error) && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div className={s.descriptionBlock}>\r\n                <div className={s.profileInfo}>\r\n                    <b>Full name:</b> {createField<ProfileTypeKeys>('full name', 'fullName', [], Input)}\r\n                    <ul className={s.socialList}>\r\n                        <div>\r\n                            <b>Looking for a job: </b>\r\n                            {createField<ProfileTypeKeys>('', 'lookingForAJob', [], Input, {type: 'checkbox'})}\r\n                        </div>\r\n                        <div>\r\n                            <b>My professional skills: </b>\r\n                            {createField<ProfileTypeKeys>('My professional skills...', 'lookingForAJobDescription', [], Textarea)}\r\n                        </div>\r\n                        <div>\r\n                            <b>About me: </b>\r\n                            {createField<ProfileTypeKeys>('About me...', 'aboutMe', [], Textarea)}\r\n                        </div>\r\n                        <div>\r\n                            <b>Contacts:</b>\r\n                            {Object.keys(profile.contacts).map(key => {\r\n                                return <div key={key} className={s.socialListItem}>\r\n                                    {/*todo: create some solution for embedded objects */}\r\n                                    <b>{key}: {createField(key, 'contacts.' + key, [], Input)}</b>\r\n                                </div>\r\n\r\n                            })}\r\n                        </div>\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst ProfileDataFormReduxForm = reduxForm<ProfileType, PropsType>({form: 'edit-profile'})(ProfileDataForm);\r\n\r\n\r\nexport default ProfileDataFormReduxForm;","import React, {ChangeEvent, useState} from \"react\";\r\nimport s from './ProfileInfo.module.css'\r\nimport usersAva from './../../../assets/images/user.png'\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\nimport ProfileStatusWithHooks from \"./Status/ProfileStatusWithHooks\";\r\nimport ProfileDataForm from \"./ProfileDataForm/ProfileDataForm\";\r\nimport {ContactsType, ProfileType} from \"../../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>,\r\n}\r\n\r\n\r\nconst ProfileInfo: React.FC<PropsType> = ({profile, status, updateStatus, isOwner, savePhoto, saveProfile}) => {\r\n\r\n    const [editMode, setEditMode] = useState(false)\r\n\r\n    const onMainPhotoSelected = (e: ChangeEvent<HTMLInputElement>) => {\r\n        if (e.target.files?.length) {\r\n            savePhoto(e.target.files[0])\r\n        }\r\n    }\r\n\r\n    const onSubmit = (formData: ProfileType) => {\r\n        //todo: remove then\r\n         saveProfile(formData).then( () => setEditMode(false));\r\n\r\n\r\n    }\r\n\r\n    if (!profile) {\r\n        return <Preloader/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img className={s.photoLong} alt='none'\r\n                     src='https://fartuk.ru/upload/resize_cache/iblock/e96/1920_384_1d2c0be91f8b91a0d3c91a9448f348e3c/skinali_prochie_goroda_14218.jpg'/>\r\n            </div>\r\n            <div className={s.descriptionBlock}>\r\n                <div>\r\n                    <img className={s.userAva} src={profile.photos.large || usersAva} alt='none'/>\r\n                </div>\r\n                {editMode\r\n                    ? <ProfileDataForm initialValues={profile} profile={profile} onSubmit={onSubmit}/>\r\n                    : <ProfileData profile={profile} isOwner={isOwner}\r\n                                   goToEditMode={() => setEditMode(true)}/>\r\n                } {/*savePhoto={savePhoto} delete with profileData*/}\r\n            </div>\r\n            <div className={s.statusBlock}>\r\n                STATUS: <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n            </div>\r\n            <div className={s.downloadingPhotos}>\r\n                {isOwner && <input type={'file'} onChange={onMainPhotoSelected}/>}\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\n\r\ntype ProfileDataPropsType = {\r\n    profile: ProfileType,\r\n    isOwner: boolean,\r\n    goToEditMode: () => void,\r\n}\r\n\r\nconst ProfileData: React.FC<ProfileDataPropsType> = ({profile, isOwner, goToEditMode}) => {\r\n\r\n    return (\r\n        <div>\r\n            {isOwner &&\r\n            <div>\r\n                <button onClick={goToEditMode}>Edit</button>\r\n            </div>\r\n            }\r\n            <div className={s.profileInfo}>\r\n                <p>{profile.fullName}</p>\r\n                <ul className={s.socialList}>\r\n                    <b>Contacts:</b>\r\n                    {Object.keys(profile.contacts).map((key) => {\r\n                        return <Contact key={key} contactTitle={key} contactValue={profile.contacts[key as keyof ContactsType]}/>\r\n                    })}\r\n                    <div>\r\n                        <b>Looking for a job: </b>{profile.lookingForAJob ? 'yes' : 'no'}\r\n                    </div>\r\n                    {profile.lookingForAJob &&\r\n                    <div>\r\n                        <b>My professional skills: </b>{profile.lookingForAJobDescription}\r\n                    </div>\r\n                    }\r\n                    <div>\r\n                        <b>About me: </b> {profile.aboutMe}\r\n                    </div>\r\n\r\n                    <div>\r\n                    </div>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype ContactsPropsType = {\r\n    contactTitle: string,\r\n    contactValue: string\r\n}\r\n\r\nconst Contact: React.FC<ContactsPropsType> = ({contactTitle, contactValue}) => {\r\n    return (\r\n        <li className={s.socialListItem}>\r\n            {contactTitle}: <a className={s.socialListItemLink} href='#'> {contactValue\r\n            ? contactValue\r\n            : 'none'}\r\n        </a>\r\n        </li>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from \"react\";\r\nimport s from \"./Post.module.css\";\r\n\r\ntype PropsType = {\r\n\r\n    message: string,\r\n    countLikes: number,\r\n}\r\n\r\nconst Post: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div className={s.item}>\r\n            <img alt='none'\r\n                src=\"https://store.playstation.com/store/api/chihiro/00_09_000/container/US/en/19/UP2477-CUSA06694_00-AV00000000000017/image?w=320&h=320&bg_color=000000&opacity=100&_version=00_09_000\"/>\r\n            {props.message}\r\n            <div>\r\n                <span>{props.countLikes} likes</span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Textarea,} from \"../../../common/FormsControls/FormsControls\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../../../utils/validators/validators\";\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\nconst minLength2 = minLengthCreator(3);\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\nexport type  AddPostFormValuesType = {\r\n    newPostText: string,\r\n}\r\ntype AddPostFormValuesTypeKeys = GetStringKeys<AddPostFormValuesType>\r\n\r\nlet AddNewPostForm: React.FC<InjectedFormProps<AddPostFormValuesType, PropsType>& PropsType> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            {createField<AddPostFormValuesTypeKeys>('new post...', 'newPostText', [required, maxLength10, minLength2], Textarea)}\r\n            <button>Add post</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default reduxForm<AddPostFormValuesType, PropsType>({\r\n    form: 'ProfileAddNewPostForm'\r\n})(AddNewPostForm)\r\n","import React from \"react\";\r\nimport s from \"./MyPosts.module.css\";\r\nimport Post from \"./Post/Post\";\r\nimport AddNewPostForm, {AddPostFormValuesType} from \"./AddNewPostForm/AddNewPostForm\";\r\nimport {PostType} from \"../../../types/types\";\r\n\r\n\r\nexport type MapPropsType = {\r\n    postsData: Array<PostType>\r\n}\r\n\r\nexport type DispatchPropsType = {\r\n    addPost: (newPostText: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n\r\n    let postsElements =\r\n        props.postsData.map(item => <Post key={item.id} message={item.messages} countLikes={item.countLikes}/>)\r\n\r\n\r\n    let onNewPost = (values: AddPostFormValuesType) => {\r\n        props.addPost(values.newPostText);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <AddNewPostForm onSubmit={onNewPost}/>\r\n            <div className={s.posts}>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nconst MyPostsMemorized = React.memo(MyPosts)\r\n\r\nexport default MyPostsMemorized;","import React from \"react\";\r\nimport {actions} from \"../../../redux/profile-reducer\";\r\nimport MyPosts, {DispatchPropsType, MapPropsType} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\n\r\n\r\n\r\nconst mapStateToProps = (state: AppStateType) => {\r\n\r\n    return {\r\n        postsData: state.profilePage.postsData,\r\n    }\r\n}\r\n\r\n\r\nconst MyPostsContainer = connect<MapPropsType, DispatchPropsType, {}, AppStateType>(mapStateToProps, {\r\n    addPost: actions.addPost,\r\n})(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from \"react\";\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../types/types\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType | null,\r\n    status: string,\r\n    updateStatus: (status: string) => void,\r\n    isOwner: boolean,\r\n    savePhoto: (file: any) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>,\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n    return (\r\n        <div>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n                isOwner={props.isOwner}\r\n                savePhoto={props.savePhoto}\r\n                saveProfile={props.saveProfile}\r\n            />\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {getStatus, getUserProfile, savePhoto, saveProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {RouteComponentProps, withRouter} from \"react-router-dom\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {ProfileType} from \"../../types/types\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\ntype MapStatePropsType = ReturnType<typeof MapStateToProps>\r\n\r\ntype MapDispatchPropsType = {\r\n    getUserProfile: (userId: number) => void,\r\n    getStatus: (userId: number) => void,\r\n    updateStatus: (status: string) => void,\r\n    savePhoto: (file: File) => void,\r\n    saveProfile: (profile: ProfileType) => Promise<any>,\r\n}\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType & RouteComponentProps<PathParamsType>;\r\n\r\nclass ProfileContainer extends React.Component<PropsType> {\r\n\r\n    refreshProfile() {\r\n\r\n        let userId: number | null = +this.props.match.params.userId;\r\n        if (!userId) {\r\n        // todo: may be replace push with redirect\r\n            userId = this.props.authorizedUserId;\r\n            if (!userId) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        if (!userId) {\r\n            throw new Error('Id should exists in URI params or in state(\"authorizedUserId\")')\r\n        } else {\r\n            this.props.getUserProfile(userId);\r\n            this.props.getStatus(userId);\r\n        }\r\n\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        this.refreshProfile();\r\n    }\r\n\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n            this.refreshProfile();\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Profile {...this.props}\r\n                     isOwner={!this.props.match.params.userId}\r\n                     profile={this.props.profile}\r\n                     status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}\r\n                     savePhoto={this.props.savePhoto}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet MapStateToProps = (state: AppStateType) => {\r\n    return ({\r\n        profile: state.profilePage.profile,\r\n        status: state.profilePage.status,\r\n        authorizedUserId: state.auth.userId,\r\n        isAuth: state.auth.isAuth,\r\n    })\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect\r\n    (MapStateToProps, {getUserProfile, getStatus, updateStatus, savePhoto, saveProfile}),\r\n    withRouter,\r\n    withAuthRedirect\r\n)(ProfileContainer)\r\n\r\n"],"sourceRoot":""}