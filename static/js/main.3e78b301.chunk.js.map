{"version":3,"sources":["components/common/Paginator/Paginator.module.css","api/profile-api.ts","redux/profile-reducer.ts","assets/images/user.png","redux/dialogs-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","components/common/Preloader/Preloader.module.css","components/Users/Users.module.css","api/api.ts","reportWebVitals.js","components/News/News.tsx","components/Settings/Settings.tsx","components/Music/Music.tsx","redux/users-selectors.ts","components/common/Paginator/Paginator.tsx","components/Users/User.tsx","components/Users/UsersSearchForm.tsx","api/users-api.ts","utils/objects-helpers.ts","redux/users-reducer.ts","components/Users/Users.tsx","components/Users/UsersContainer.tsx","api/auth-api.ts","api/security-api.ts","redux/auth-reducer.ts","redux/app-reducer.ts","redux/sidebar-reducer.ts","redux/redux-store.ts","hoc/withSuspense.tsx","components/login/Login.tsx","redux/auth-selectors.ts","components/Header/Header.tsx","App.tsx","index.tsx","components/common/FormsControls/FormsControls.tsx","assets/images/Wedges-3s-200px.svg","components/common/Preloader/Preloader.tsx","utils/validators/validators.ts","components/common/FormsControls/FormsControls.module.css"],"names":["module","exports","profileAPI","userId","instance","get","then","res","data","status","put","photoFile","formData","FormData","append","headers","profile","initialState","postsData","id","messages","countLikes","actions","addPost","newPostText","type","deletePost","postId","setUserProfile","setStatus","savePhotoSuccess","photos","getUserProfile","dispatch","a","getStatus","updateStatus","resultCode","savePhoto","file","saveProfile","getState","auth","Error","stopSubmit","_error","Promise","reject","profileReducer","state","action","newPost","filter","item","dialogsData","name","messagesData","message","addMessages","newMessagesText","dialogsReducer","newMessages","subscribers","ws","closeHandler","notifySubscribersAboutStatus","console","log","setTimeout","createChannel","messageHandler","e","JSON","parse","forEach","s","openHandler","errorHandler","cleanUp","removeEventListener","close","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","map","m","v1","index","array","length","ResultCodesEnum","ResultCodeForCaptchaEnum","axios","create","withCredentials","baseURL","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","News","Settings","Music","getUsers","createSelector","usersPage","users","u","getUsersFilter","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","followingInProgress","Paginator","totalItemsCount","onPageChanged","portionSize","pagesCount","Math","ceil","pages","i","portionCount","useState","portionNumber","setPotionNumber","leftPortionPageNumber","rightPortionPageNumber","className","paginator","onClick","p","cn","selectedPage","pageNumber","User","user","unfollow","follow","userItem","to","src","small","userPhoto","photo","alt","followed","disabled","some","usersSearchFormValidate","values","UsersSearchForm","React","memo","props","useSelector","enableReinitialize","initialValues","term","friend","String","validate","onSubmit","setSubmitting","onFilterChanged","isSubmitting","as","value","usersAPI","post","delete","updateObjectInArray","items","itemId","objPropName","newObjProps","requestUsers","page","totalCount","usersReducer","Users","useDispatch","history","useHistory","useEffect","parsed","queryString","location","search","substr","actualPage","actualFilter","query","pathname","UsersPage","pageTitle","Preloader","authAPI","email","password","rememberMe","captcha","SecurityAPI","login","isAuth","captchaUrl","getAuthUserData","meData","Success","getCapchaUrl","url","authReducer","initialized","appReducer","sidebarData","imgUrl","sidebarReducer","rootReducers","combineReducers","profilePage","dialogsPage","sidebarPage","form","formReducer","app","chat","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunkMiddleWare","__store__","withSuspense","WrappedComponent","Suspense","fallback","maxLength","maxLengthCreator","minLength","minLengthCreator","LoginReduxForm","reduxForm","handleSubmit","error","createField","required","Input","undefined","formSummaryError","LoginPage","loginData","CaptchaIsRequired","selectIsAuth","selectCurrentUserLogin","Header","Layout","span","theme","mode","defaultSelectedKeys","Item","style","background","icon","UserOutlined","danger","shape","SubMenu","Menu","Content","Footer","Sider","DialogsContainer","lazy","ProfileContainer","ChatPage","SuspendedProfile","SuspendedDialogs","SuspendedChat","App","catchAllUnhandledErrors","alert","this","initializeApp","padding","margin","width","height","title","LaptopOutlined","NotificationOutlined","minHeight","exact","path","render","textAlign","Component","AppContainer","withRouter","connect","promise","all","SamuraiJSApp","basename","process","ReactDOM","StrictMode","document","getElementById","FormControl","meta","touched","children","hasError","formControl","Textarea","input","restProps","placeholder","validators","component","text","preloader"],"mappings":"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","file":"static/js/main.3e78b301.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"paginator\":\"Paginator_paginator__lT3ll\",\"pageNumber\":\"Paginator_pageNumber__2YYWp\",\"selectedPage\":\"Paginator_selectedPage__3acON\"};","import {PhotosType, ProfileType} from \"../types/types\";\r\nimport {instance, APIResponseType} from \"./api\";\r\n\r\ntype SavePhotoResponseType = {\r\n    photos: PhotosType\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: number) {\r\n        return instance.get<ProfileType>(`profile/` + userId).then(res => res.data)\r\n    },\r\n    getStatus(userId: number){\r\n        return instance.get<string>(`/profile/status/${userId}`).then(res => res.data)\r\n    },\r\n    updateStatus(status: string){\r\n        return instance.put<APIResponseType>(`/profile/status`, {\r\n            status: status\r\n        }).then(res => res.data)\r\n    },\r\n    savePhoto: function (photoFile: File) {\r\n        const formData = new FormData();\r\n        formData.append('image', photoFile)\r\n        return instance.put<APIResponseType<SavePhotoResponseType>>(`/profile/photo`, formData, {\r\n            headers: {\r\n                'Content-Type': 'multipart/form-data',\r\n            }\r\n        }).then(res => res.data)\r\n    },\r\n    saveProfile(profile: ProfileType){\r\n        return instance.put<APIResponseType>('profile', profile).then(res => res.data)\r\n    },\r\n}","import {PhotosType, PostType, ProfileType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {profileAPI} from \"../api/profile-api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\n\r\n\r\nlet initialState = {\r\n    postsData: [\r\n        {id: 1, messages: 'Hi, how are you?', countLikes: 4},\r\n        {id: 2, messages: 'It\\'s my first post', countLikes: 3},\r\n        {id: 3, messages: 'It\\'s my seconds post', countLikes: 1},\r\n        {id: 4, messages: 'blablabla', countLikes: 2},\r\n    ] as Array<PostType>,\r\n    profile: null as ProfileType | null,\r\n    status: '',\r\n};\r\n\r\nconst profileReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/PROFILE/ADD-POST':\r\n            let newPost = {\r\n                id: 5,\r\n                messages: action.newPostText,\r\n                countLikes: 0,\r\n            }\r\n            return ({\r\n                ...state,\r\n                postsData: [...state.postsData, newPost],\r\n            })\r\n        case 'SN/PROFILE/SET_USERS_PROFILE':\r\n            return ({\r\n                ...state, profile: action.profile\r\n            })\r\n        case 'SN/PROFILE/SET_STATUS':\r\n            return ({\r\n                ...state,\r\n                status: action.status\r\n            })\r\n        case 'SN/PROFILE/DELETE_POST':\r\n            return ({\r\n                ...state,\r\n                postsData: state.postsData.filter(item => item.id !== action.postId)\r\n            })\r\n        case 'SN/PROFILE/SAVE_PHOTO_SUCCESS':\r\n            return ({\r\n                ...state,\r\n                profile: {...state.profile, photos: action.photos} as ProfileType\r\n            })\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n\r\n    addPost: (newPostText: string) => {\r\n        return {\r\n            type: 'SN/PROFILE/ADD-POST',\r\n            newPostText,\r\n        } as const\r\n    },\r\n\r\n    deletePost: (postId: number) => {\r\n        return {\r\n            type: 'SN/PROFILE/DELETE_POST',\r\n            postId,\r\n        } as const\r\n    },\r\n\r\n    setUserProfile: (profile: ProfileType) => {\r\n        return {\r\n            type: 'SN/PROFILE/SET_USERS_PROFILE',\r\n            profile\r\n        } as const\r\n    },\r\n\r\n\r\n    setStatus: (status: string) => {\r\n        return {\r\n            type: 'SN/PROFILE/SET_STATUS',\r\n            status,\r\n        } as const\r\n    },\r\n\r\n\r\n    savePhotoSuccess: (photos: PhotosType) => {\r\n        return {\r\n            type: 'SN/PROFILE/SAVE_PHOTO_SUCCESS',\r\n            photos,\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await profileAPI.getProfile(userId)\r\n        dispatch(actions.setUserProfile(data));\r\n    }\r\n}\r\n\r\nexport const getStatus = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await profileAPI.getStatus(userId)\r\n        dispatch(actions.setStatus(data))\r\n    }\r\n}\r\n\r\nexport const updateStatus = (status: string): ThunkType => {\r\n    return async (dispatch) => {\r\n        try {\r\n            const data = await profileAPI.updateStatus(status)\r\n            if (data.resultCode === 0) {\r\n                dispatch(actions.setStatus(status))\r\n            }\r\n        } catch (error) {\r\n            //\r\n        }\r\n    }\r\n}\r\n\r\nexport const savePhoto = (file: File): ThunkType => {\r\n    return async (dispatch) => {\r\n        const data = await profileAPI.savePhoto(file);\r\n        if (data.resultCode === 0) {\r\n            dispatch(actions.savePhotoSuccess(data.data.photos))\r\n        }\r\n    }\r\n}\r\n\r\nexport const saveProfile = (profile: ProfileType): ThunkType => {\r\n    return async (dispatch, getState) => {\r\n        const userId = getState().auth.userId;\r\n        const data = await profileAPI.saveProfile(profile);\r\n        if (data.resultCode === 0) {\r\n            if(userId !== null) {\r\n                dispatch(getUserProfile(userId))\r\n            }else {\r\n                throw new Error('userId can\\'t be null')\r\n            }\r\n        } else {\r\n            dispatch(stopSubmit('edit-profile', {_error: data.messages[0]}))\r\n            return Promise.reject(data.messages[0]);\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default profileReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","export default __webpack_public_path__ + \"static/media/user.998e6aeb.png\";","import {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\ntype DialogsDataType = {\r\n    id: number,\r\n    name: string,\r\n}\r\n\r\ntype MessagesDataType = {\r\n    id: number,\r\n    message: string,\r\n}\r\n\r\nlet initialState =  {\r\n    dialogsData:[\r\n        {id: 1, name: 'Gennadiy'},\r\n        {id: 2, name: 'Valera'},\r\n        {id: 3, name: 'Alex'},\r\n        {id: 4, name: 'Roma'}\r\n    ] as Array<DialogsDataType>,\r\n\r\n    messagesData:[\r\n        { id: 1, message: 'Hi'},\r\n        { id: 2, message: 'How are your Gendev'},\r\n        { id: 3, message: 'Yo'},\r\n        { id: 4, message: 'Yo'},\r\n        { id: 5, message: 'Yo'},\r\n    ] as Array<MessagesDataType>,\r\n}\r\n\r\n\r\n\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/DIALOGS/ADD-MESSAGES':\r\n            let newMessages = {\r\n                id: 6,\r\n                message: action.newMessagesText,\r\n            }\r\n            return ({\r\n                ...state,\r\n                messagesData: [...state.messagesData, newMessages],\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n\r\n    addMessages: (newMessagesText: string) => {\r\n        return {\r\n            type: 'SN/DIALOGS/ADD-MESSAGES',\r\n            newMessagesText,\r\n        } as const\r\n    },\r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default dialogsReducer;\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>","const subscribers = {\r\n    'message-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[],\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'message-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    console.log('Close ws')\r\n    setTimeout(createChannel, 3000);\r\n}\r\n\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subscribers['message-received'].forEach(s => s(newMessages))\r\n};\r\n\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready');\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error');\r\n    console.log('Refresh page')\r\n}\r\n\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\n\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subscribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close();\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx');\r\n    notifySubscribersAboutStatus('pending');\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n\r\n}\r\n\r\nexport const chatAPI = {\r\n    start(){\r\n        createChannel()\r\n    },\r\n    stop(){\r\n        subscribers['message-received'] = [];\r\n        subscribers['status-changed'] = [];\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subscribers[eventName] = subscribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string){\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string,\r\n    photo: string,\r\n    userId: number,\r\n    userName: string,\r\n}\r\n\r\nexport type StatusType = 'pending' | 'ready' | 'error';","import React from \"react\";\r\nimport {ActionTypes, FormAction} from \"redux-form\";\r\nimport {chatAPI, ChatMessageAPIType, StatusType} from \"../api/chat-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {v1} from 'uuid';\r\n\r\ntype ChatMessageType = ChatMessageAPIType & {id: string}\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType,\r\n};\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEIVED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages\r\n                    .map(m => ({...m, id: v1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            };\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEIVED', payload: {messages}\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: {status}\r\n    } as const),\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null;\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages));\r\n        }\r\n    }\r\n\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null;\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status));\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('message-received',newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n}\r\n\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe(\"message-received\", newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\nexport default chatReducer;\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preloader\":\"Preloader_preloader__2skBv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"photo\":\"Users_photo__dKsfm\"};","import axios from \"axios\";\r\nimport {ProfileType, UserType} from \"../types/types\";\r\n\r\nexport const instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": '84f36ecb-9bbc-4772-8f9f-ea85b2ebbb8e',\r\n    }\r\n});\r\n\r\nexport enum ResultCodesEnum {\r\n    Success = 0,\r\n    Error = 1,\r\n}\r\n\r\nexport enum ResultCodeForCaptchaEnum {\r\n    CaptchaIsRequired = 10,\r\n}\r\n\r\nexport type GetItemsType = {\r\n    items: Array<UserType>,\r\n    totalCount: number,\r\n    error: string | null,\r\n}\r\n\r\nexport type APIResponseType<D = {}, RC = ResultCodesEnum> = {\r\n    data: D,\r\n    messages: Array<string>,\r\n    resultCode: RC\r\n}\r\n\r\n\r\n\r\n\r\n\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\r\nimport s from './News.module.css'\r\n\r\nconst News: React.FC = () => {\r\n    return(\r\n        <div>\r\n            News\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from \"react\";\r\nimport s from './Settings.module.css'\r\n\r\nconst Settings: React.FC = () => {\r\n    return(\r\n        <div>\r\n            Settings\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Settings;","import React from \"react\";\r\nimport s from './Music.module.css';\r\n\r\nconst Music:React.FC = () => {\r\n    return(\r\n        <div>\r\n            Music\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Music;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n    return users.filter(u => true);\r\n} )\r\n\r\nexport const getUsersFilter = (state: AppStateType) => {\r\n    return state.usersPage.filter\r\n}\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n\r\n","import React, {useState} from \"react\";\r\nimport s from \"./Paginator.module.css\";\r\nimport cn from 'classnames'\r\n\r\ntype PropsType = {\r\n    totalItemsCount: number,\r\n    pageSize: number,\r\n    onPageChanged?: (pageNumber: number) => void,\r\n    currentPage?: number,\r\n    portionSize?: number,\r\n}\r\n\r\nlet Paginator: React.FC<PropsType> = ({totalItemsCount,\r\n                                          pageSize,\r\n                                          onPageChanged = () => {},\r\n                                          currentPage = 1,\r\n                                          portionSize = 10}) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize);\r\n    let pages: Array<number> = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize);\r\n    let [portionNumber, setPotionNumber] = useState<number>(1);\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1;\r\n    let rightPortionPageNumber = portionNumber * portionSize;\r\n\r\n    return (\r\n        <div className={s.paginator}>\r\n            {portionNumber > 1 &&\r\n            <button onClick={() => setPotionNumber(portionNumber - 1)}>PREV</button>}\r\n\r\n            {pages\r\n                .filter(p => p >= leftPortionPageNumber && p <= rightPortionPageNumber)\r\n                .map((p) => {\r\n                    return <span className={ cn({\r\n                            [s.selectedPage]: currentPage === p\r\n                        }, s.pageNumber) }\r\n                                 key={p}\r\n                                 onClick={(e) => {\r\n                                     onPageChanged(p)\r\n                                 }}>{p}</span>\r\n                })}\r\n            {portionCount > portionNumber &&\r\n            <button onClick={() => setPotionNumber(portionNumber + 1)}>NEXT</button>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Paginator;","import React from \"react\";\r\nimport s from './Users.module.css';\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {UserType} from \"../../types/types\";\r\n\r\ntype PropsType = {\r\n    user: UserType,\r\n    followingInProgress: Array<number>,\r\n    unfollow: (userId: number) => void,\r\n    follow: (userId: number) => void,\r\n}\r\n\r\n\r\nconst User: React.FC<PropsType> = ({user, followingInProgress, unfollow, follow, ...props}) => {\r\n    let userItem = user;\r\n\r\n    return (<div>\r\n                <span>\r\n                    <div>\r\n                        <NavLink to={'/profile/' + userItem.id}>\r\n                            <img src={userItem.photos.small !== null ? userItem.photos.small : userPhoto} className={s.photo}\r\n                                 alt='none'/>\r\n                        </NavLink>\r\n                    </div>\r\n                    <div>\r\n                        {userItem.followed ?\r\n                            <button disabled={followingInProgress.some(id => id === userItem.id)} onClick={() => {\r\n                                unfollow(userItem.id)\r\n                            }}>Unfollow</button> :\r\n                            <button disabled={followingInProgress.some(id => id === userItem.id)} onClick={() => {\r\n                                follow(userItem.id)\r\n                            }}>Follow</button>}\r\n                    </div>\r\n                </span>\r\n                <span>\r\n                    <span>\r\n                        <div>{userItem.name}</div>\r\n                        <div>{userItem.status}</div>\r\n                    </span>\r\n                    <span>\r\n                        <div>{\"userItem.location.country\"}</div>\r\n                        <div>{\"userItem.location.city\"}</div>\r\n                    </span>\r\n                </span>\r\n            </div>)\r\n}\r\n\r\nexport default User;","import {Field, Form, Formik} from \"formik\";\r\nimport React from \"react\";\r\nimport {FilterType} from \"../../redux/users-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"../../redux/users-selectors\";\r\n\r\n\r\nconst usersSearchFormValidate = (values: any) => {\r\n    const errors = {}\r\n    return errors\r\n}\r\n\r\ntype FriendFormType = 'true' | 'fasle' | 'null'\r\n\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType,\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: FilterType) => void\r\n}\r\n\r\nconst UsersSearchForm: React.FC<PropsType> = React.memo((props) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n        const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n            const filter: FilterType = {\r\n                term: values.term,\r\n                friend: values.friend === 'null' ? null : values.friend === 'true' ? true : false\r\n            }\r\n            props.onFilterChanged(filter);\r\n            setSubmitting(false)\r\n        }\r\n\r\n        return (\r\n            <div>\r\n                <Formik\r\n                    enableReinitialize={true}\r\n                    initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                    validate={usersSearchFormValidate}\r\n                    onSubmit={submit}\r\n                >\r\n                    {({isSubmitting}) => (\r\n                        <Form>\r\n                            <Field type=\"text\" name=\"term\"/>\r\n                            <Field name=\"friend\" as=\"select\">\r\n                                <option value=\"null\">All</option>\r\n                                <option value=\"true\">Only followed</option>\r\n                                <option value=\"false\">Only unfollowed</option>\r\n                            </Field>\r\n                            <button type=\"submit\" disabled={isSubmitting}>\r\n                                Find\r\n                            </button>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </div>\r\n        )\r\n    }\r\n)\r\nexport default UsersSearchForm;","import {GetItemsType, instance, APIResponseType} from \"./api\";\r\n\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number, term:string = '', friend: null | boolean = null) {\r\n        return instance.get<GetItemsType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend === null ? '' : `&friend=${friend}`))\r\n            .then(res => res.data);\r\n    },\r\n    follow(userId: number) {\r\n        return instance.post<APIResponseType>(`follow/${userId}`).then(res => res.data)\r\n    },\r\n    unfollow(userId: number) {\r\n        return instance.delete(`follow/${userId}`).then(res => res.data) as Promise<APIResponseType>\r\n\r\n    },\r\n}\r\n\r\n","export const updateObjectInArray = (items:any, itemId: any, objPropName: any, newObjProps: any) => {\r\n\r\n    return items.map((item: any) => {\r\n        if (item[objPropName] === itemId) {\r\n            return {...item, ...newObjProps}\r\n        }\r\n        return item;\r\n    })\r\n}\r\n\r\n","import {usersAPI} from \"../api/users-api\";\r\nimport {updateObjectInArray} from \"../utils/objects-helpers\";\r\nimport {UserType} from \"../types/types\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\nimport {Dispatch} from \"redux\";\r\nimport {APIResponseType} from \"../api/api\";\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UserType>,\r\n    pageSize: 10,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<number>,// array of users ids\r\n    filter: {\r\n        term: '',\r\n        friend: null as null | boolean\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nconst usersReducer = (state = initialState, action: ActionsTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/USERS/FOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: true})\r\n            }\r\n        case 'SN/USERS/UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: updateObjectInArray(state.users, action.userId, 'id', {followed: false})\r\n            }\r\n        case 'SN/USERS/SET_USERS': {\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SN/USERS/SET_FILTER': {\r\n            return {...state, filter: action.payload}\r\n        }\r\n        case 'SN/USERS/SET_CURRENT_PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SN/USERS/SET_TOTAL_USERS_COUNT': {\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FETCHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS': {\r\n            return {\r\n                ...state,\r\n                followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n\r\nexport const actions = {\r\n    followSuccess: (userId: number) => ({\r\n        type: 'SN/USERS/FOLLOW',\r\n        userId\r\n    } as const),\r\n     unfollowSuccess: (userId: number) => ({\r\n         type: 'SN/USERS/UNFOLLOW',\r\n         userId\r\n     } as const),\r\n     setUsers: (users: Array<UserType>) => ({\r\n         type: 'SN/USERS/SET_USERS',\r\n         users\r\n     } as const),\r\n     setCurrentPage: (currentPage: number) => ({\r\n        type: 'SN/USERS/SET_CURRENT_PAGE',\r\n        currentPage\r\n    } as const),\r\n    setFilter: (filter: FilterType) => ({\r\n        type : 'SN/USERS/SET_FILTER',\r\n        payload: filter\r\n    } as const),\r\n     setTotalUsersCount: (totalUsersCount: number) => ({\r\n        type: 'SN/USERS/SET_TOTAL_USERS_COUNT',\r\n        totalUsersCount\r\n    } as const),\r\n     toggleIsFetching: (isFetching: boolean) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FETCHING',\r\n        isFetching\r\n    } as const),\r\n\r\n     toggleFollowingProgress: (isFetching: boolean, userId: number) => ({\r\n        type: 'SN/USERS/TOGGLE_IS_FOLLOWING_PROGRESS',\r\n        isFetching,\r\n        userId\r\n    } as const),\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const requestUsers = (page: number, pageSize: number, filter: FilterType): ThunkType => {\r\n\r\n    return async (dispatch, getState) => {\r\n        dispatch(actions.toggleIsFetching(true));\r\n        dispatch(actions.setCurrentPage(page))\r\n        dispatch(actions.setFilter(filter))\r\n\r\n        let data = await usersAPI.getUsers(page, pageSize, filter.term, filter.friend)\r\n        dispatch(actions.toggleIsFetching(false));\r\n        dispatch(actions.setUsers(data.items));\r\n        dispatch(actions.setTotalUsersCount(data.totalCount));\r\n    }\r\n}\r\n\r\nconst _followUnfollowFlow = async (dispatch: Dispatch<ActionsTypes>, userId: number, apiMethod: (userId: number) => Promise<APIResponseType>, actionCreator: (userId: number) => ActionsTypes) => {\r\n    dispatch(actions.toggleFollowingProgress(true, userId));\r\n    let response = await apiMethod(userId)\r\n    if (response.resultCode === 0) {\r\n        dispatch(actionCreator(userId))\r\n    }\r\n    dispatch(actions.toggleFollowingProgress(false, userId));\r\n}\r\n\r\nexport const follow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.follow.bind(usersAPI), actions.followSuccess)\r\n    }\r\n}\r\n\r\nexport const unfollow = (userId: number): ThunkType => {\r\n    return async (dispatch) => {\r\n        await _followUnfollowFlow(dispatch, userId, usersAPI.unfollow.bind(usersAPI), actions.unfollowSuccess)\r\n    }\r\n}\r\n\r\nexport default usersReducer;\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsTypes = InferActionsTypes<typeof actions>;\r\ntype ThunkType = BaseThunkType<ActionsTypes>\r\nexport type FilterType = typeof initialState.filter","import React, {useEffect} from \"react\";\r\nimport Paginator from \"../common/Paginator/Paginator\";\r\nimport User from \"./User\";\r\nimport UsersSearchForm from \"./UsersSearchForm\";\r\nimport {FilterType, requestUsers} from \"../../redux/users-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"../../redux/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport * as queryString from \"querystring\";\r\n\r\n\r\ntype PropsType = {}\r\n\r\n\r\ntype QueryParamsType = { term?: string, page?: string, friend?: string };\r\nexport const Users: React.FC<PropsType> = (props) => {\r\n\r\n\r\n    const users = useSelector(getUsers);\r\n    const totalUsersCount = useSelector(getTotalUsersCount);\r\n    const currentPage = useSelector(getCurrentPage);\r\n    const pageSize = useSelector(getPageSize);\r\n    const filter = useSelector(getUsersFilter);\r\n    const followingInProgress = useSelector(getFollowingInProgress);\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        const parsed = queryString.parse(history.location.search.substr(1)) as QueryParamsType\r\n\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n\r\n        if (!!parsed.page) actualPage = +parsed.page\r\n\r\n        if (!!parsed.term) actualFilter = {...actualFilter, term: parsed.term as string}\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = {...actualFilter, friend: null}\r\n                break\r\n            case 'true':\r\n                actualFilter = {...actualFilter, friend: true}\r\n                break\r\n            case 'false':\r\n                actualFilter = {...actualFilter, friend: false}\r\n                break\r\n        }\r\n\r\n        dispatch(requestUsers(actualPage, pageSize, actualFilter));\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n\r\n        const query: QueryParamsType = {};\r\n\r\n        if(!!filter.term) query.term = filter.term\r\n        if(filter.friend !== null) query.friend = String(filter.friend)\r\n        if(currentPage !== 1) query.page = String(currentPage)\r\n\r\n        history.push({\r\n            pathname: '/developers',\r\n            search: queryString.stringify(query),\r\n        })\r\n    }, [filter, currentPage])\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(requestUsers(pageNumber, pageSize, filter));\r\n    };\r\n\r\n    const onFilterChanged = (filter: FilterType) => {\r\n        dispatch(requestUsers(1, pageSize, filter));\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollow(userId))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(follow(userId))\r\n    }\r\n\r\n    return (\r\n        <div>\r\n\r\n            <div>\r\n                <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            </div>\r\n\r\n            <Paginator currentPage={currentPage}\r\n                       onPageChanged={onPageChanged}\r\n                       pageSize={pageSize}\r\n                       totalItemsCount={totalUsersCount}/>\r\n            {users.map(item => <User\r\n                    key={item.id}\r\n                    user={item}\r\n                    followingInProgress={followingInProgress}\r\n                    unfollow={unfollow}\r\n                    follow={follow}\r\n                />\r\n            )\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport Preloader from \"../common/Preloader/Preloader\";\r\nimport {getIsFetching,} from \"../../redux/users-selectors\";\r\nimport {Users} from \"./Users\";\r\n\r\n\r\ntype UsersPagePropsType = {\r\n    pageTitle: string,\r\n}\r\n\r\nexport const UsersPage: React.FC<UsersPagePropsType> = (props) => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (\r\n        <div>\r\n            <h2>{props.pageTitle}</h2>\r\n            {isFetching ? <Preloader/> : null}\r\n            <Users/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n","import {instance, APIResponseType, ResultCodeForCaptchaEnum, ResultCodesEnum} from \"./api\";\r\n\r\ntype MeResponseDataType = {\r\n    id: number,\r\n    email: string,\r\n    login: string\r\n}\r\n\r\ntype LoginResponseDataType = {\r\n  userId: number\r\n}\r\n\r\n\r\n\r\nexport const authAPI = {\r\n    me(){\r\n        return instance.get<APIResponseType<MeResponseDataType>>(`auth/me`).then(res => res.data)\r\n    },\r\n    login(email: string, password: string, rememberMe = false, captcha: null | string = null ){\r\n        return instance.post<APIResponseType<LoginResponseDataType,ResultCodesEnum | ResultCodeForCaptchaEnum>>(`auth/login`, {email, password, rememberMe, captcha}).then(res => res.data)\r\n    },\r\n    logout(){\r\n        return instance.delete(`auth/login`)\r\n    }\r\n}","import {instance} from \"./api\";\r\n\r\ntype getCaptchaUrlResponseType = {\r\n    url: string,\r\n}\r\n\r\nexport const SecurityAPI ={\r\n    getCaptchaUrl() {\r\n        return instance.get<getCaptchaUrlResponseType>(`security/get-captcha-url`).then(res => res.data)\r\n    }\r\n}","import {authAPI} from \"../api/auth-api\";\r\nimport {FormAction, stopSubmit} from \"redux-form\";\r\nimport {ResultCodeForCaptchaEnum, ResultCodesEnum} from \"../api/api\";\r\nimport {SecurityAPI} from \"../api/security-api\";\r\nimport {BaseThunkType, InferActionsTypes} from \"./redux-store\";\r\n\r\nlet initialState = {\r\n    userId: null as (number | null),\r\n    email: null as string | null,\r\n    login: null as string | null,\r\n    isAuth: false,\r\n    captchaUrl: null as string | null,\r\n}\r\n\r\nconst authReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/auth/SET_USER_DATA':\r\n        case 'SN/auth/GET_CAPTCHA_URL_SUCCESS':\r\n            return {\r\n                ...state,\r\n                ...action.payload,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    setAuthUserData: (userId: number | null, email: string | null, login: string | null, isAuth: boolean) => ({\r\n        type: 'SN/auth/SET_USER_DATA',\r\n        payload: {userId, email, login, isAuth}\r\n    } as const),\r\n\r\n    getCaptchaUrlSuccess: (captchaUrl: string)  => ({\r\n        type: 'SN/auth/GET_CAPTCHA_URL_SUCCESS',\r\n        payload: {captchaUrl}\r\n    } as const),\r\n\r\n}\r\n\r\nexport const getAuthUserData = () :ThunkType => async (dispatch) => {\r\n    let meData = await authAPI.me();\r\n    if (meData.resultCode === ResultCodesEnum.Success) {\r\n        let {id, email, login} = meData.data;\r\n        dispatch(actions.setAuthUserData(id, email, login, true))\r\n    }\r\n}\r\n// error String\r\nexport const login = (email: string, password: string, rememberMe: boolean, captcha: string): ThunkType => async (dispatch) => {\r\n    let loginData = await authAPI.login(email, password, rememberMe, captcha)\r\n    if (loginData.resultCode === ResultCodesEnum.Success) {\r\n\r\n        dispatch(getAuthUserData())\r\n    } else {\r\n        if (loginData.resultCode === ResultCodeForCaptchaEnum.CaptchaIsRequired) {\r\n            dispatch(getCapchaUrl());\r\n        }\r\n        let message = loginData.messages.length > 0 ? loginData.messages[0] : 'Some error'\r\n        dispatch(stopSubmit('login', {_error: message}));\r\n    }\r\n}\r\n\r\nexport const getCapchaUrl = () :ThunkType => async (dispatch) => {\r\n    const data = await SecurityAPI.getCaptchaUrl()\r\n    const captchaUrl = data.url\r\n    dispatch(actions.getCaptchaUrlSuccess(captchaUrl))\r\n}\r\n\r\nexport const logout = (): ThunkType => async (dispatch) => {\r\n    let response = await authAPI.logout()\r\n    if (response.data.resultCode === ResultCodesEnum.Success) {\r\n        dispatch(actions.setAuthUserData(null, null, null, false))\r\n    }\r\n}\r\n\r\n\r\nexport default authReducer;\r\n\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = BaseThunkType<ActionsType | FormAction>","\r\nimport {getAuthUserData} from \"./auth-reducer\";\r\nimport {InferActionsTypes} from \"./redux-store\";\r\n\r\n\r\nlet initialState = {\r\n    initialized: false,\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type){\r\n        case 'SN/APP/INITIALIZED_SUCCESS':\r\n            return{\r\n                ...state,\r\n                initialized: true,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const actions = {\r\n    InitializedSuccess: () => ({type: 'SN/APP/INITIALIZED_SUCCESS'} as const),\r\n}\r\n\r\nexport const initializeApp = () => (dispatch: any) => {\r\n    let promise =  dispatch(getAuthUserData());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(actions.InitializedSuccess())\r\n        });\r\n}\r\n\r\nexport default appReducer;","type SidebarDataType = {\r\n    id: number,\r\n    name: string,\r\n    imgUrl: string\r\n}\r\n\r\nlet initialState = {\r\n    sidebarData: [\r\n        {id: 1, name: 'Alex', imgUrl: 'https://i.guim.co.uk/img/media/26392d05302e02f7bf4eb143bb84c8097d09144b/446_167_3683_2210/master/3683.jpg?width=1200&height=1200&quality=85&auto=format&fit=crop&s=49ed3252c0b2ffb49cf8b508892e452d'},\r\n        {id: 2, name: 'Rim', imgUrl: 'https://media.istockphoto.com/photos/grey-stripped-mixedbreed-cat-sitting-isolated-on-white-picture-id1217828258?b=1&k=6&m=1217828258&s=170667a&w=0&h=aTRNOEvv3DrtII-f0r9rVTS-nAHE4NyYopuu-sZIv8g='},\r\n        {id: 3, name: 'Pop', imgUrl: 'https://thumbs.dreamstime.com/b/cat-third-eye-beige-has-got-white-background-isolated-187489452.jpg'},\r\n    ] as Array<SidebarDataType>\r\n};\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nconst sidebarReducer = (state = initialState, action: any): InitialStateType => {\r\n    switch (action.type){\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default sidebarReducer;","import {Action, applyMiddleware, combineReducers, compose, createStore} from \"redux\";\r\nimport profileReducer from \"./profile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport sidebarReducer from \"./sidebar-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleWare, {ThunkAction} from 'redux-thunk';\r\nimport {ActionTypes, reducer as formReducer} from 'redux-form'\r\nimport appReducer from \"./app-reducer\";\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\n\r\n\r\nlet rootReducers = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    sidebarPage: sidebarReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducers;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\nexport type InferActionsTypes<T> = T extends {[keys: string]: (...args: any[]) => infer U} ? U : never\r\n\r\nexport type BaseThunkType<A extends Action = Action, R = Promise<void>> = ThunkAction<R, AppStateType, unknown, A>\r\n\r\n// @ts-ignore\r\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\nconst store = createStore(rootReducers, composeEnhancers(applyMiddleware(thunkMiddleWare)));\r\n\r\n// @ts-ignore\r\nwindow.__store__ = store;\r\n\r\nexport default store;\r\n","import React from \"react\";\r\nimport Preloader from \"../components/common/Preloader/Preloader\";\r\n\r\nexport function withSuspense<WCP>(WrappedComponent: React.ComponentType<WCP>){\r\n    return (props: WCP) => {\r\n        return <React.Suspense fallback={<Preloader/>}>\r\n            <WrappedComponent {...props}/>\r\n        </React.Suspense>\r\n    };\r\n}","import React from \"react\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {maxLengthCreator, minLengthCreator, required} from \"../../utils/validators/validators\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, GetStringKeys, Input} from \"../common/FormsControls/FormsControls\";\r\nimport s from \"../common/FormsControls/FormsControls.module.css\";\r\n\r\n\r\nlet maxLength = maxLengthCreator(30);\r\nlet minLength = minLengthCreator(1);\r\n\r\n\r\ntype LoginFormOwnPropsType = {\r\n    captchaUrl: string | null,\r\n}\r\n\r\ntype LoginFormValuesType = {\r\n    email: string,\r\n    password: string,\r\n    rememberMe: boolean,\r\n    captcha: string,\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<LoginFormValuesType, LoginFormOwnPropsType> & LoginFormOwnPropsType>\r\n    = ({handleSubmit, error, captchaUrl}) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            {createField<LoginFormValuesTypeKeys>('Email', 'email', [required, maxLength, minLength], Input)}\r\n            {createField<LoginFormValuesTypeKeys>('Password', 'password', [required, maxLength, minLength], Input, {type: 'password'})}\r\n            {createField<LoginFormValuesTypeKeys>(undefined, 'rememberMe', [], Input, {type: 'checkbox'}, 'remember me')}\r\n\r\n            {captchaUrl && <img src={captchaUrl}/>}\r\n            {captchaUrl &&\r\n            createField<LoginFormValuesTypeKeys>(\"Symbols from image\", 'captcha', [required], Input, {})\r\n            }\r\n\r\n            {(error) && <div className={s.formSummaryError}>\r\n                {error}\r\n            </div>}\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\n\r\nconst LoginReduxForm = reduxForm<LoginFormValuesType, LoginFormOwnPropsType>({form: 'login'})(LoginForm)\r\n\r\n\r\ntype LoginFormValuesTypeKeys = GetStringKeys<LoginFormValuesType>\r\n\r\n\r\n\r\nexport const LoginPage: React.FC = (props) => {\r\n\r\n    const captchaUrl = useSelector((state:AppStateType) => state.auth.captchaUrl)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmit = (formData: LoginFormValuesType) => {\r\n        dispatch(login(formData.email, formData.password, formData.rememberMe, formData.captcha));\r\n    }\r\n    if (isAuth) {\r\n        return <Redirect to={'/profile'}/>\r\n    }\r\n    return (<div>\r\n            <h1>LOGIN</h1>\r\n            <LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n","import {AppStateType} from \"./redux-store\";\r\n\r\n\r\nexport const selectIsAuth = (state: AppStateType) => {\r\n    return state.auth.isAuth\r\n}\r\n\r\n\r\nexport const selectCurrentUserLogin = (state: AppStateType) => {\r\n    return state.auth.login\r\n}","import React from \"react\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {Avatar, Button, Col, Layout, Menu, Row} from \"antd\";\r\nimport {UserOutlined} from \"@ant-design/icons\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {selectCurrentUserLogin, selectIsAuth} from \"../../redux/auth-selectors\";\r\nimport {logout} from \"../../redux/auth-reducer\";\r\n\r\nexport type MapPropsType = {}\r\n\r\n\r\nexport const Header: React.FC<MapPropsType> = (props) => {\r\n\r\n    const isAuth = useSelector(selectIsAuth)\r\n    const login = useSelector(selectCurrentUserLogin)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const logoutCallback = () => {\r\n        dispatch(logout())\r\n    }\r\n\r\n    const {Header} = Layout;\r\n\r\n    return (\r\n        <Header className=\"header\">\r\n            <div className=\"logo\"/>\r\n            <Row>\r\n                <Col span={21}>\r\n                    <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']}>\r\n                        <Menu.Item key=\"1\"><Link to='/developers'>Developers</Link></Menu.Item>\r\n                    </Menu>\r\n                </Col>\r\n                {isAuth\r\n                    ? <>\r\n                        <Col span={1}>\r\n                            <Avatar alt={login || ''} style={{background: 'pink'}} icon={<UserOutlined/>}/>\r\n                        </Col>\r\n                        <Col span={2}>\r\n                            <Button danger shape=\"round\" onClick={logoutCallback}>EXIT</Button>\r\n                        </Col>\r\n                    </>\r\n                    : <Col span={3}>\r\n                        <Button><Link to={'/login'}>Login</Link></Button>\r\n                    </Col>}\r\n            </Row>\r\n        </Header>\r\n    )\r\n}\r\n\r\n","import React from \"react\";\nimport './App.css';\nimport 'antd/dist/antd.css';\nimport News from \"./components/News/News\";\nimport Settings from \"./components/Settings/Settings\";\nimport Music from \"./components/Music/Music\";\nimport {BrowserRouter, Link, Redirect, Route, Switch, withRouter} from \"react-router-dom\";\nimport {UsersPage} from \"./components/Users/UsersContainer\";\nimport {connect, Provider} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {initializeApp} from \"./redux/app-reducer\";\nimport Preloader from \"./components/common/Preloader/Preloader\";\nimport store, {AppStateType} from \"./redux/redux-store\";\nimport {withSuspense} from \"./hoc/withSuspense\";\nimport {LoginPage} from \"./components/login/Login\";\nimport {Breadcrumb, Layout, Menu} from \"antd\";\nimport {LaptopOutlined, NotificationOutlined, UserOutlined} from '@ant-design/icons';\nimport {Header} from \"./components/Header/Header\";\nimport FrendsContainer from \"./components/Navigation/Frends/FrendsContainer\";\n\nconst { SubMenu } = Menu;\nconst { Content, Footer, Sider } = Layout;\n\nconst DialogsContainer = React.lazy(() => import('./components/Dialogs/DialogsContainer'));\nconst ProfileContainer = React.lazy(() => import(\"./components/Profile/ProfileContainer\"))\nconst ChatPage = React.lazy(() => import('./components/pages/Chat/ChatPage'))\n\ntype MapPropsType = ReturnType<typeof mapStateToProps>\n\ntype DispatchPropsType = {\n    initializeApp: () => void\n}\n\nconst SuspendedProfile = withSuspense(ProfileContainer)\nconst SuspendedDialogs = withSuspense(DialogsContainer)\nconst SuspendedChat = withSuspense(ChatPage);\n\n\nclass App extends React.Component<MapPropsType & DispatchPropsType> {\n    catchAllUnhandledErrors = (e: PromiseRejectionEvent) => {\n        alert('Some error occured');\n        // console.error(promiseRejectionsEvent)\n    }\n\n    componentDidMount() {\n        this.props.initializeApp();\n        window.addEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener('unhandledrejection', this.catchAllUnhandledErrors)\n    }\n\n    render() {\n        if (!this.props.initialized) {\n            return <Preloader/>\n        }\n\n        return (\n            <Layout>\n\n                <Header/>\n\n                <Content style={{ padding: '0 50px' }}>\n                    <Breadcrumb style={{ margin: '16px 0' }}>\n                        <Breadcrumb.Item>Home</Breadcrumb.Item>\n                        <Breadcrumb.Item>List</Breadcrumb.Item>\n                        <Breadcrumb.Item>App</Breadcrumb.Item>\n                    </Breadcrumb>\n                    <Layout className=\"site-layout-background\" style={{ padding: '24px 0' }}>\n                        <Sider className=\"site-layout-background\" width={200}>\n                            <Menu\n                                mode=\"inline\"\n                                // defaultSelectedKeys={['2']}\n                                // defaultOpenKeys={['sub1']}\n                                style={{ height: '100%' }}\n                            >\n\n                                <SubMenu key=\"sub1\" icon={<UserOutlined />} title=\"My Profile\">\n                                    <Menu.Item key=\"1\"><Link to='/profile' >Profile</Link></Menu.Item>\n                                    <Menu.Item key=\"2\" ><Link to='/dialogs' >Messages</Link></Menu.Item>\n                                    <Menu.Item key=\"3\"><Link to='/music' >My music</Link></Menu.Item>\n                                    <Menu.Item key=\"4\"><Link to='/news' >News</Link></Menu.Item>\n                                </SubMenu>\n                                <SubMenu key=\"sub2\" icon={<LaptopOutlined />} title=\"Developers\">\n                                    <Menu.Item key=\"5\"><Link to='/developers'>Developers</Link></Menu.Item>\n                                    <Menu.Item key=\"6\"><Link to='/settings'>Settings</Link></Menu.Item>\n                                    {/*<Menu.Item key=\"7\">option7</Menu.Item>*/}\n                                    {/*<Menu.Item key=\"8\">option8</Menu.Item>*/}\n                                </SubMenu>\n                                <SubMenu key=\"sub3\" icon={<NotificationOutlined />} title=\"Chat\">\n                                    <Menu.Item key=\"9\"><Link to='/chat'>Developers chat</Link></Menu.Item>\n                                    {/*<Menu.Item key=\"10\">option10</Menu.Item>*/}\n                                    {/*<Menu.Item key=\"11\">option11</Menu.Item>*/}\n                                    {/*<Menu.Item key=\"12\">option12</Menu.Item>*/}\n                                </SubMenu>\n\n                            </Menu>\n                        </Sider>\n                        <Content style={{ padding: '0 24px', minHeight: 280 }}>\n                            <Switch>\n                                <Route exact path=\"/\" render={() => <Redirect to={\"/profile\"}/>}/>\n                                <Route path=\"/profile/:userId?\" render={() => <SuspendedProfile/>}/>\n                                <Route path=\"/dialogs\" render={() => <SuspendedDialogs/>}/>\n                                <Route path=\"/news\" render={() => <News/>}/>\n                                <Route path=\"/music\" render={() => <Music/>}/>\n                                <Route path=\"/settings\" render={() => <Settings/>}/>\n                                <Route path=\"/developers\" render={() => <UsersPage pageTitle={'Users'}/>}/>\n                                <Route path=\"/login\" render={() => <LoginPage/>}/>\n                                <Route path=\"/chat\" render={() => <div><SuspendedChat/></div>}/>\n                                <Route path=\"*\" render={() => <div>ERROR 404 NOT FOUND</div>}/>\n                            </Switch>\n                        </Content>\n                    </Layout>\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>Gendev ©2021 Created by 1613</Footer>\n            </Layout>\n\n\n            /*<div className='app-wrapper'>\n                <HeaderContainer/>\n                <Navigation/>\n                <div className='app-wrapper-content'>\n\n                </div>\n            </div>*/\n        )\n    }\n}\n\nconst mapStateToProps = (state: AppStateType) => {\n    return {\n        initialized: state.app.initialized,\n    }\n}\n\nlet AppContainer = compose<React.ComponentType>(\n    withRouter,\n    connect(mapStateToProps, {initializeApp}))(App);\n\n\nconst SamuraiJSApp: React.FC = () => {\n    return <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <Provider store={store}>\n            <AppContainer/>\n        </Provider>\n    </BrowserRouter>\n}\n\nexport default SamuraiJSApp;","import React from 'react';\nimport reportWebVitals from './reportWebVitals';\nimport ReactDOM from \"react-dom\";\nimport SamuraiJSApp from \"./App\";\n\n\n    ReactDOM.render(\n                <React.StrictMode>\n                    <SamuraiJSApp/>\n                </React.StrictMode>,\n        document.getElementById('root')\n    );\n\nreportWebVitals();\n","import React from \"react\";\r\nimport s from './FormsControls.module.css'\r\nimport {Field, WrappedFieldMetaProps, WrappedFieldProps} from \"redux-form\";\r\nimport {FieldValidatorType} from \"../../../utils/validators/validators\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps,\r\n}\r\n\r\nconst FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={`${s.formControl} ${hasError ? s.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><textarea {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, children, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}><input {...input} {...restProps}/></FormControl>\r\n    )\r\n}\r\n\r\n\r\nexport function createField<FormKeysType extends string>(placeholder: string | undefined,\r\n                                          name: FormKeysType,\r\n                                          validators: Array<FieldValidatorType>,\r\n                                          component: React.FC<WrappedFieldProps>,\r\n                                          props = {},\r\n                                          text = '') {\r\n    return <div>\r\n        <Field\r\n            component={component}\r\n            name={name}\r\n            placeholder={placeholder}\r\n            validate={validators}\r\n            {...props}\r\n        />{text}\r\n    </div>\r\n}\r\n\r\nexport type GetStringKeys<T> = Extract<keyof T, string>","export default __webpack_public_path__ + \"static/media/Wedges-3s-200px.d48bebd8.svg\";","import React from \"react\";\r\nimport s from './Preloader.module.css'\r\nimport preloader from \"../../../assets/images/Wedges-3s-200px.svg\";\r\n\r\n\r\nconst Preloader: React.FC = () => {\r\n    return(\r\n        <div className={s.preloader}>\r\n            <img src={preloader} alt=\"none\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Preloader;","\r\nexport type FieldValidatorType = (value: string) => string | undefined\r\n\r\nexport const required:FieldValidatorType = (value) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number): FieldValidatorType => (value) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}\r\n\r\nexport const minLengthCreator = (minLength: number): FieldValidatorType => (value) => {\r\n    if (value.length < minLength) return `Min length is ${minLength} symbols`\r\n    return undefined\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__gxunC\",\"error\":\"FormsControls_error__Fh74I\",\"formSummaryError\":\"FormsControls_formSummaryError__36mzX\"};"],"sourceRoot":""}