{"version":3,"sources":["hoc/WithAuthRedirect.tsx","components/Dialogs/Dialogs.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/DialogItem/AddMessageForm/AddMessageForm.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["mapStateToPropsForRedirect","state","isAuth","auth","withAuthRedirect","WrappedComponent","connect","props","restProps","to","module","exports","DialogItem","className","s","dialogsItem","id","activeClassName","activeLink","name","MessageItem","messageItem","message","maxLength","maxLengthCreator","minLength","minLengthCreator","reduxForm","form","onSubmit","handleSubmit","createField","required","Textarea","Dialogs","dialogsPage","dialogsElements","dialogsData","map","item","messagesElements","messagesData","dialogs","dialogsItems","messagesItems","values","addMessages","newMessagesText","compose","actions"],"mappings":"yMAKMA,EAA6B,SAACC,GAChC,MAAO,CACHC,OAAQD,EAAME,KAAKD,SAWpB,SAASE,EAAsBC,GAelC,OAJqCC,YACjCN,EAA4B,GADKM,EAViC,SAACC,GAAW,IAEzEL,EAAwBK,EAAxBL,OAAWM,EAF6D,YAEhDD,EAFgD,YAI7E,OAAKL,EAEM,cAACG,EAAD,eAAsBG,IAFb,cAAC,IAAD,CAAUC,GAAK,gB,oBCtB3CC,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,cAAgB,iC,oBCAlHD,EAAOC,QAAU,CAAC,YAAc,gCAAgC,WAAa,iC,mICgB9DC,EARyB,SAACL,GACrC,OACI,qBAAKM,UAAWC,IAAEC,YAAlB,SACI,cAAC,IAAD,CAASN,GAAE,mBAAcF,EAAMS,IAAMC,gBAAmBH,IAAEI,WAA1D,SAAuEX,EAAMY,U,kBCC1EC,EAN0B,SAACb,GACtC,OACI,qBAAKM,UAAWC,IAAEO,YAAlB,SAAgCd,EAAMe,W,yBCH1CC,EAAYC,YAAiB,IAC7BC,EAAYC,YAAiB,GAoBlBC,cAAoC,CAACC,KAAM,wBAA3CD,EAfqF,SAACpB,GAEjG,OACI,uBAAMsB,SAAUtB,EAAMuB,aAAtB,UACI,8BACKC,YAA0C,eAAgB,kBAAmB,CAACC,IAAUP,EAAWF,GAAWU,OAG3H,8BACA,kDCkBWC,EAtBsB,SAAC3B,GAClC,IAAIN,EAAQM,EAAM4B,YACdC,EAAkBnC,EAAMoC,YAAYC,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAYpB,KAAMoB,EAAKpB,KAAoBH,GAAIuB,EAAKvB,IAAlBuB,EAAKvB,OACvFwB,EAAmBvC,EAAMwC,aAAaH,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAA2BjB,QAASiB,EAAKjB,SAAvBiB,EAAKvB,OAI7E,OACI,sBAAKH,UAAWC,IAAE4B,QAAlB,UACI,qBAAK7B,UAAWC,IAAE6B,aAAlB,SACKP,IAEL,sBAAKvB,UAAWC,IAAE8B,cAAlB,UACKJ,EACD,cAAC,EAAD,CAAgBX,SAVR,SAACgB,GACjBtC,EAAMuC,YAAYD,EAAOE,2B,kCCNlBC,sBACX1C,aARkB,SAACL,GACnB,MAAM,CACFkC,YAAalC,EAAMkC,eAMhB,eAAsBc,MAC7B7C,IAFW4C,CAGbd","file":"static/js/4.33c10dd5.chunk.js","sourcesContent":["import React, {Component} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\nconst mapStateToPropsForRedirect = (state: AppStateType) => {\r\n    return {\r\n        isAuth: state.auth.isAuth,\r\n    }\r\n}\r\n\r\ntype MapPropsType = {\r\n    isAuth: boolean,\r\n}\r\n\r\ntype DispatchPropsType = {\r\n}\r\n\r\nexport function withAuthRedirect<WCP>(WrappedComponent : React.ComponentType<WCP>){\r\n    const RedirectComponent: React.FC<MapPropsType & DispatchPropsType> = (props) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n\r\n        if (!isAuth) return <Redirect to = '/login'/>\r\n\r\n            return <WrappedComponent {...restProps as WCP}/>\r\n    }\r\n\r\n\r\n    let ConnectedAuthRedirectComponent = connect<MapPropsType, DispatchPropsType, WCP, AppStateType>(\r\n        mapStateToPropsForRedirect, {})\r\n    (RedirectComponent);\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2fMWs\",\"dialogsItems\":\"Dialogs_dialogsItems__3ehDJ\",\"messagesItems\":\"Dialogs_messagesItems__3ajEu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogsItem\":\"DialogItem_dialogsItem__398uG\",\"activeLink\":\"DialogItem_activeLink__2GnyC\"};","import React from \"react\";\r\nimport s from \"./DialogItem.module.css\"\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n   id: number,\r\n   name: string\r\n}\r\n\r\nconst DialogItem: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.dialogsItem}>\r\n            <NavLink to={`/dialogs/${props.id}`} activeClassName = {s.activeLink}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem","import React from \"react\";\r\nimport s from './MessageItem.module.css'\r\n\r\ntype PropsType = {\r\n    message: string\r\n}\r\n\r\nconst MessageItem: React.FC<PropsType> = (props) => {\r\n    return(\r\n        <div className={s.messageItem}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageItem","import {maxLengthCreator, minLengthCreator, required} from \"../../../../utils/validators/validators\";\r\nimport React from \"react\";\r\nimport {InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {createField, Textarea} from \"../../../common/FormsControls/FormsControls\";\r\nimport {NewMessageFormValuesType} from \"../../Dialogs\";\r\n\r\nlet maxLength = maxLengthCreator(10);\r\nlet minLength = minLengthCreator(2);\r\n\r\ntype NewMessageFormValuesKeysType = Extract <keyof NewMessageFormValuesType, string>;\r\ntype PropsType = {}\r\n\r\nconst AddMessageForm:React.FC<InjectedFormProps<NewMessageFormValuesType, PropsType> & PropsType> = (props) => {\r\n\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                {createField<NewMessageFormValuesKeysType>('new messages', 'newMessagesText', [required, minLength, maxLength],Textarea)}\r\n\r\n    </div>\r\n    <div>\r\n    <button>send</button>\r\n    </div>\r\n    </form>\r\n)\r\n}\r\n\r\nexport default reduxForm<NewMessageFormValuesType>({form: 'dialogAddMessageForm'})(AddMessageForm);","import React from \"react\";\r\nimport s from \"./Dialogs.module.css\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport MessageItem from \"./MessageItem/MessageItem\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport AddMessageForm from \"./DialogItem/AddMessageForm/AddMessageForm\";\r\n\r\n\r\ntype PropsType = {\r\n    dialogsPage: InitialStateType\r\n    addMessages: (newMessagesText: string) => void,\r\n}\r\n\r\nexport type NewMessageFormValuesType = {\r\n    newMessagesText: string,\r\n}\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n    let state = props.dialogsPage;\r\n    let dialogsElements = state.dialogsData.map(item => <DialogItem name={item.name} key={item.id} id={item.id}/>)\r\n    let messagesElements = state.messagesData.map(item => <MessageItem key={item.id} message={item.message}/>)\r\n    let addNewMessage = (values: NewMessageFormValuesType ) => {\r\n        props.addMessages(values.newMessagesText);\r\n    }\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messagesItems}>\r\n                {messagesElements}\r\n                <AddMessageForm onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Dialogs;","import React from \"react\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {withAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\nimport {actions} from \"../../redux/dialogs-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType) => {\r\n    return{\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {...actions}),\r\n    withAuthRedirect\r\n)(Dialogs);"],"sourceRoot":""}